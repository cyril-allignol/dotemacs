#+TITLE: Emacs configuration
#+LANGUAGE: en

* Paths
  Set the load path for local packages:
  #+BEGIN_SRC emacs-lisp +n
    (setq load-path (cons "~/.emacs.d/lisp" load-path))
    (let ((default-directory  "~/.emacs.d/"))
      (normal-top-level-add-subdirs-to-load-path))
  #+END_SRC

  I store customizations in =custom.el=, machine-local configurations in
  =local.el=, private non-sensitive information in =private.el= and
  authentication information in the encrypted =~/.authinfo.gpg=:
  #+BEGIN_SRC emacs-lisp +n
    (setq custom-file (concat user-emacs-directory "/custom.el"))
    (load-file custom-file)
    (require 'local nil t)
    (require 'private nil t)
    (setq auth-sources '((:source "~/.authinfo.gpg")))
  #+END_SRC

* Package management
  Force installation of every package if necessary, and
  trigger compilation:
  #+BEGIN_SRC emacs-lisp +n
    (setq use-package-always-ensure t)
    (use-package auto-compile :config (auto-compile-on-load-mode))
    (setq load-prefer-newer t)
  #+END_SRC

* Server
  I use the server feature of emacs to only launch one instance. Then I
  use emacsclient to connect to it. The server is only started with the
  first graphical emacs (thus I keep the possibility of lauching another
  emacs process in a terminal without a warning):
  #+BEGIN_SRC emacs-lisp +n
    (use-package edit-server
      :if window-system
      :init
      (add-hook 'after-init-hook 'server-start t)
      (add-hook 'after-init-hook 'edit-server-start t))
  #+END_SRC

* Aesthetics
** Startup
   I don't need any welcome message or splash screen, just give me a
   buffer...:
   #+BEGIN_SRC emacs-lisp +n
     (setq initial-scratch-message ""
           inhibit-startup-message t
           inhibit-startup-echo-area-message "")
   #+END_SRC
   ... that must be 80 characters wide:
   #+BEGIN_SRC emacs-lisp +n
     (add-to-list 'default-frame-alist '(width . 81)) ; why do I need 81 here?
   #+END_SRC

** Spaaaace
   I also don't need any menu/tool/scroll bars:
   #+BEGIN_SRC emacs-lisp +n
     (menu-bar-mode 0)
     (tool-bar-mode 0)
     (scroll-bar-mode 0)
   #+END_SRC

** Where am I
   To navigate, I like to see line and column numbers, as well as the
   current line:
   #+BEGIN_SRC emacs-lisp +n
     (line-number-mode t)
     (column-number-mode t)
     (global-hl-line-mode t)
   #+END_SRC
   I like a non-blinking cursor:
   #+BEGIN_SRC emacs-lisp +n
     (blink-cursor-mode 0)
   #+END_SRC
   I want paren matching information:
   #+BEGIN_SRC emacs-lisp +n
     (show-paren-mode t)
   #+END_SRC

** Font
   If available on the system, I like the "Hack" font. Otherwise I use
   "DejaVu":
   #+BEGIN_SRC emacs-lisp +n
     (if (member "Hack" (font-family-list))
         (set-frame-font "Hack-10" nil t)
       (set-frame-font "DejaVu Sans Mono-10" nil t))
   #+END_SRC

** Theme
   I use doom themes, with a theme switching scheme (taken [[https://github.com/habamax/.emacs.d/blob/master/lisp/haba-appearance.el][here]]) to
   toggle between light and dark in a keystroke:
   #+BEGIN_SRC emacs-lisp +n
(use-package doom-themes
  :bind ([f10] . my/toggle-theme)
  :init
  (doom-themes-org-config)
  ;; Theme cycling
  ;; taken from:
  ;; https://github.com/habamax/.emacs.d/blob/master/lisp/haba-appearance.el
  (defvar *my-theme-light* 'doom-one-light)
  (defvar *my-theme-dark* 'doom-one)
  (defvar *my-current-theme* *my-theme-dark*)
  (load-theme *my-theme-dark*)
  ;; disable other themes before loading new one
  (defadvice load-theme (before theme-dont-propagate activate)
    "Disable theme before loading new one."
    (mapc #'disable-theme custom-enabled-themes))
  (defun my/next-theme (theme)
    (if (eq theme 'default)
        (disable-theme *my-current-theme*)
      (progn
        (load-theme theme t)))
    (setq *my-current-theme* theme))
  (defun my/toggle-theme ()
    (interactive)
    (cond
     ((eq *my-current-theme* *my-theme-dark*) (my/next-theme *my-theme-light*))
     ((eq *my-current-theme* *my-theme-light*) (my/next-theme *my-theme-dark*))))
  )
#+END_SRC

** Modeline
   To get along the theme, I use the doom modeline with fancy icons:
   #+BEGIN_SRC emacs-lisp +n
     (use-package all-the-icons)
     (use-package doom-modeline
       :hook (after-init . doom-modeline-mode)
       :init
       (setq doom-modeline-buffer-file-name-style 'buffer-name
             doom-modeline-icon t
             doom-modeline-major-mode-icon t
             doom-modeline-major-mode-color-icon t
             doom-modeline-env-python-executable "python3"
             )
       )
   #+END_SRC

* General behavior and tools
** Whitespace management
   I hate trailing white space, so I remove it on save (and display it
   when it's there):
   #+BEGIN_SRC emacs-lisp +n
     (setq-default show-trailing-whitespace t)
     (add-hook 'before-save-hook 'delete-trailing-whitespace)
   #+END_SRC
   Also, I hate tabs :), so I only use spaces for indentation:
   #+BEGIN_SRC emacs-lisp +n
     (setq-default indent-tabs-mode nil)
   #+END_SRC

** Scolling
   I like a smooth scrolling rather than the default page-by-page:
   #+BEGIN_SRC emacs-lisp +n
     (setq scroll-margin 3
           scroll-conservatively 101
           scroll-up-aggressively 0.01
           scroll-down-aggressively 0.01
           scroll-preserve-screen-position t
           auto-window-vscroll nil
           hscroll-margin 5
           hscroll-step 5)
   #+END_SRC

** Backups
   I don't want emacs to fill my directories with save files, so I
   store them to a spacific place (/e.g./: =~/.saves=):
   #+BEGIN_SRC emacs-lisp +n
(setq backup-by-copying t
      delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)       ; use versioned backups
(push (cons "." "~/.saves") backup-directory-alist)
#+END_SRC

** History
   I keep an history of recent files/commands:
   #+BEGIN_SRC emacs-lisp +n
(use-package savehist
  :init
  (setq savehist-file "~/.emacs-history")
  (setq savehist-length 1000)
  :config
  (savehist-mode +1))
#+END_SRC

** Global keys
   I map a few function keys on navigation and compilation...
   #+BEGIN_SRC emacs-lisp +n
(define-key global-map [f4]  'goto-char)
(define-key global-map [f5]  'goto-line)
(define-key global-map [f6]  'compile)
(define-key global-map [f8]  'next-error)
(define-key global-map [shift f8]  'previous-error)
#+END_SRC
   ... and the two-superior on completion:
   #+BEGIN_SRC emacs-lisp +n
(define-key global-map [?Â²]  'dabbrev-expand)
#+END_SRC
   Finally, I re-map =C-x C-b=:
   #+BEGIN_SRC emacs-lisp +n
(define-key global-map (kbd "C-x C-b") 'electric-buffer-list)
#+END_SRC

** Mini-buffer
   I want to ignore case in the mini-buffer for filename completion:
   #+BEGIN_SRC emacs-lisp +n
     (setq read-file-name-completion-ignore-case t)
   #+END_SRC
   I use Helm for "smart" command completion:
   #+BEGIN_SRC emacs-lisp +n
     (use-package helm-config
       :ensure helm
       :bind
       (("C-c h" . helm-command-prefix)
        ("M-x" . helm-M-x)
        ("M-y" . helm-show-kill-ring)
        ("C-x b" . helm-mini)
        ;; ("C-x C-f" . helm-find-files)
        ;; ("C-x 5 f" . helm-find-files)
        :map helm-map
        ("<tab>" . helm-execute-persistent-action)
        ("C-i" . helm-execute-persistent-action)
        ("C-z" . helm-select-action))
       :config
       (global-unset-key (kbd "C-x c"))
       (setq helm-split-window-inside-p t
             helm-move-to-line-cycle-in-source t
             helm-ff-search-library-in-sexp t
             helm-scroll-amount 8
             helm-ff-file-name-history-use-recentf t
             helm-echo-input-in-header-line t)
       (setq helm-autoresize-max-height 0)
       (setq helm-autoresize-min-height 20)
       (helm-autoresize-mode 1)
       (helm-mode 1))
   #+END_SRC

** Completion
   I use Company for completion, with an on-demand setup:
   #+BEGIN_SRC emacs-lisp +n
     (use-package company
       :hook (after-init . global-company-mode)
       :bind
       (("C-<tab>" . company-complete)
        :map company-active-map ("<tab>" . company-complete-common-or-cycle))
       :config
       (setq company-idle-delay nil ;; on-demand completion
             company-minimum-prefix-length 0
             company-show-numbers t
             company-selection-wrap-around t
             )
       )
   #+END_SRC

** Useful shortcuts with Crux
   The Crux package provides some useful functions for line, buffer of
   file manipulation. I map a few of those functions to the suggested key
   combinations:
   #+BEGIN_SRC emacs-lisp +n
     (use-package crux
       :bind
       (("C-a" . crux-move-beginning-of-line)
        ("C-c o" . crux-open-with)
        ("C-c r" . crux-rename-file-and-buffer)
        )
       )
   #+END_SRC
** Undoing
   I'm not particularly fond of emacs' default undo mechanism. I prefer
   to see my undos as a tree, which I have with:
   #+BEGIN_SRC emacs-lisp +n
(use-package undo-tree
  :diminish undo-tree-mode
  :bind* (("C-x u" . undo-tree-undo)
          ("C-_" . undo-tree-undo)
          ("M-m r" . undo-tree-redo)
          ("M-m U" . undo-tree-visualize))
  :config
  (global-undo-tree-mode 1))
#+END_SRC

** Directory navigation
   Now and then, it is useful to navigate files in a directory tree. I do
   this with =neotree=, which I bind to =[f3]=:
   #+BEGIN_SRC emacs-lisp +n
(use-package neotree
  :bind ([f3] . neotree-toggle)
  :config
  (doom-themes-neotree-config)
  )
#+END_SRC

** Cursors
   In some occasions, like refactoring, having multiple cursors visually
   helps:
   #+BEGIN_SRC emacs-lisp +n
(use-package multiple-cursors
  :defer t
  :bind (("C->" . mc/mark-next-like-this)
         ("C-<" . mc/mark-previous-like-this)
         ("C-* C-*" . mc/mark-all-like-this)
         ("C-* C-a" . mc/edit-beginnings-of-lines)
         ("C-* C-e" . mc/edit-ends-of-lines)
         ("C-* C-i" . mc/insert-numbers)))
#+END_SRC

* Org
Capture templates are from [[http://doc.norang.ca/org-mode.html#OrgFiles][here]].
#+BEGIN_SRC emacs-lisp +n
  (use-package org
    :bind
    (("C-c l" . org-store-link)
     ("C-c a" . org-agenda)
     ("C-c c" . org-capture))
    :init
    (setq org-todo-keywords
          '((sequence "TODO(t)" "STARTED(s)" "WAITING(w)" "|" "DONE(d)")
            (sequence "DELEGATED" "|" "DEFERRED" "CANCELED(c)")))
    (setq org-todo-keyword-faces
          '(("WAITING" . org-warning) ("DELEGATED" . org-wait)))
    (setq org-enforce-todo-dependencies t)
    (setq org-log-done 'time)
    (setq org-directory "~/Cloud/Org")
    (setq org-capture-templates
          (quote (("t" "Task" entry (file "~/Cloud/Org/refile.org")
                   "* TODO %?\n%U\n%a\n" :empty-lines 1)
                  ("n" "Note" entry (file "~/Cloud/Org/refile.org")
                   "* %? :NOTE:\n%U\n%a\n" :empty-lines 1)
                  ("j" "Journal" entry (file+datetree "~/Cloud/Org/journal.org")
                   "* %?\n%U\n" :empty-lines 1)
                  ("m" "Meeting" entry (file "~/Cloud/Org/refile.org")
                   "* MEETING with %? :MEETING:\n%U"
                   :clock-in t :clock-resume t :empty-lines 1)
                  ("p" "Phone call" entry (file "~/Cloud/Org/refile.org")
                   "* PHONE CALL with %? :PHONE:\n%U"
                   :clock-in t :clock-resume t :empty-lines 1))))
    (setq org-src-fontify-natively t
          org-src-tab-acts-natively t
          org-src-window-setup 'current-window
          org-ellipsis "â¤µ"
          org-pretty-entities t)
    (add-to-list 'org-structure-template-alist
                 '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
    (add-to-list 'org-structure-template-alist
                 '("ml" "#+BEGIN_SRC ocaml\n?\n#+END_SRC"))
    (add-to-list 'org-structure-template-alist
                 '("py" "#+BEGIN_SRC python\n?\n#+END_SRC"))
    (setq org-agenda-files '("~/Cloud/Org")
          org-default-notes-file "~/Cloud/Org/refile.org"
          org-agenda-include-diary nil
          org-agenda-diary-file "~/Cloud/Org/diary.org"
          org-agenda-ndays 10
          org-agenda-start-on-weekday nil
          )
    (setq org-refile-targets (quote ((nil :maxlevel . 4)
                                     (org-agenda-files :maxlevel . 4)))
          org-refile-allow-creating-parent-nodes (quote confirm)
          org-refile-use-outline-path t
          org-outline-path-complete-in-steps nil
          )
    (use-package ox-latex :ensure nil)
    (add-to-list 'org-latex-default-packages-alist '("mathletters" "ucs"))
    (setq org-latex-inputenc-alist '(("utf8" . "utf8x")))
    (add-to-list 'org-latex-packages-alist '("" "minted"))
    (setq org-latex-listings 'minted
          org-latex-pdf-process
          '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
            "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f")
          )
    )

  (require 'french-holidays)
  (setq calendar-holidays holiday-french-holidays)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . nil)
     (ocaml . t)
     (python . t)
     (R . t)))
  (setq org-babel-python-command "python3")
  (setq org-confirm-babel-evaluate nil)
#+END_SRC
* Programming
** Git
   I use Magit for version control management with diff-hl as a diff
   tool:
   #+BEGIN_SRC emacs-lisp +n
     (use-package magit
       :bind ("C-x g" . magit-status))

     (use-package diff-hl
       :config
       (add-hook 'magit-post-refresh-hook #'diff-hl-magit-post-refresh)
       (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
       (add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode))
   #+END_SRC
** Coq
   For interactive Coq proving, I use Proof General:
   #+BEGIN_SRC emacs-lisp +n
(use-package proof-general
  :mode ("\\.v\\'" . coq-mode)
  :init
  (setq proof-splash-enable nil
        proof-sticky-errors t)
  )
#+END_SRC
   For convenience, I also use =company-coq=, with an extended symbols
   list:
   #+BEGIN_SRC emacs-lisp +n
(use-package company-coq
  :commands (company-coq-mode)
  :hook (coq-mode . company-coq-mode)
  :config
  (setq company-coq-disabled-features '(hello))
  (setq
   coq-symbols-list
   (lambda ()
     (setq-local prettify-symbols-alist
                 '(("~" . ?Â¬) ("empty" . ?Ã) ("*" . ?Ã) ("\\in" . ?\u220A)
                   ("~exists" . ?\u2204)
                   ("Qed." . ?â ) ("Defined." . ?â¡)
                   ("==>*" . (?\u27F9 (Br . Bl) ?*))
                   ("=?" . ?\u225F) ("<=?" . (?\u2264 (Br . Bl) ??))
                   ("\\|" . ?\u21D3)
                   ;; ("|]\\|" . (?\u27E7 (Br . Bl) ?\u21D3))
                   ("\\(" . ?\u27E8) ("\\)" . ?\u27E9)
                   ("\\:" . ?\u2236) ("|=" . ?\u22A7)
                   ("Gamma'" . (?Î (Br . Bl) ?'))
                   ("Gamma''" . (?Î (Br . Bl) ?' (Br . Bl) ?'))
                   ("Gamma0" . (?Î (Br . Bl) ?0))
                   ("Gamma1" . (?Î (Br . Bl) ?1))
                   ("Gamma2" . (?Î (Br . Bl) ?2))
                   ("sigma'" . (?Ï (Br . Bl) ?'))
                   ("sigma''" . (?Ï (Br . Bl) ?' (Br . Bl) ?'))
                   ("sigma0" . (?Ï (Br . Bl) ?0))
                   ("sigma1" . (?Ï (Br . Bl) ?1))
                   ("sigma2" . (?Ï (Br . Bl) ?2))
                   ;; same as other capital letters -> confusing
                   ;; ("Alpha" . ?Î) ("Beta" . ?Î) ("Epsilon" . ?Î) ("Zeta" . ?Î)
                   ;; ("Eta" . ?Î) ("Iota" . ?Î) ("Kappa" . ?Î) ("Mu" . ?Î)
                   ;; ("Nu" . ?Î) ("Omicron" . ?Î) ("Rho" . ?Î¡) ("Tau" . ?Î¤)
                   ;; ("Upsilon" . ?Î¥) ("Chi" . ?Î§)
                   ;; OK
                   ("Gamma" . ?Î) ("Delta" . ?Î) ("Theta" . ?Î) ("Lambda" . ?Î)
                   ("Xi" . ?Î) ("Pi" . ?Î ) ("Sigma" . ?Î£) ("Phi" . ?Î¦)
                   ("Psi" . ?Î¨) ("Omega" . ?Î©)
                   ("alpha" . ?Î±) ("beta" . ?Î²) ("gamma" . ?Î³)
                   ("delta" . ?Î´) ("epsilon" . ?Îµ) ("zeta" . ?Î¶)
                   ("eta" . ?Î·) ("theta" . ?Î¸) ("iota" . ?Î¹)
                   ("kappa" . ?Îº) ("mu" . ?Î¼)
                   ("nu" . ?Î½) ("xi" . ?Î¾) ("omicron" . ?Î¿)
                   ("pi" . ?Ï) ("rho" . ?Ï) ("sigma" . ?Ï)
                   ("tau" . ?Ï) ("upsilon" . ?Ï) ("phi" . ?Ï)
                   ("chi" . ?Ï) ("psi" . ?Ï)
                   ;; also confusing?
                   ("lambda" . ?Î») ("omega" . ?Ï)
                   ))))
  (add-hook 'coq-mode-hook coq-symbols-list)
  (add-hook 'coq-goals-mode-hook coq-symbols-list)
  )

#+END_SRC

** OCaml
   For OCaml, I use a combination of Tuareg, Merlin (with company) and
   utop. All of this being configured to work with my opam-based OCaml
   distribution:
#+BEGIN_SRC emacs-lisp +n
  (use-package utop
    :hook (tuareg-mode . utop-minor-mode)
    :init
    (autoload 'utop-minor-mode "utop" "Minor mode for utop" t)
    (setq utop-command "opam config exec -- utop -emacs"))

  (use-package tuareg
    :mode (("\\.ml[ilp]?" . tuareg-mode)
           ("\\.mly$" . tuareg-menhir-mode)
           ("[./]opam_?\\'" . tuareg-opam-mode)
           ("_oasis\\'" . conf-mode)
           ("_tags\\'" . conf-mode)
           ("_log\\'" . conf-mode))
    :init
    ;; Setup environment variables using opam
    (dolist
        (var (car (read-from-string
                   (shell-command-to-string "opam config env --sexp"))))
      (setenv (car var) (cadr var)))
    (setq exec-path (split-string (getenv "PATH") path-separator))
    (push (concat (getenv "OCAML_TOPLEVEL_PATH")
                  "/../../share/emacs/site-lisp") load-path)
    (dolist (ext '(".cmo" ".cmx" ".cma" ".cmxa" ".cmi" ".cmt" ".cmti"
                   ".annot" ".depends"))
      (add-to-list 'completion-ignored-extensions ext))
    ;; :config
    ;; (setq tuareg-prettify-symbol-mode t)
    )

  (use-package dune
    :mode ("dune\\'" . dune-mode))

  (use-package merlin-mode
    :ensure merlin
    :hook tuareg-mode
    :init
    (with-eval-after-load 'company
      (add-to-list 'company-backends 'merlin-company-backend))
    (setq merlin-command 'opam))
#+END_SRC

** Python
   Here I just set-up the interpreter to be Python 3 (not necessary on
   most recent Linux systems):
   #+BEGIN_SRC emacs-lisp +n
     (use-package python
       :mode ("\\.py\\'" . python-mode)
       :config
       (setq python-shell-interpreter "python3"))
   #+END_SRC

** BNF
#+BEGIN_SRC emacs-lisp +n
(use-package bnf-mode :mode "\\.bnf\\'")
#+END_SRC
* Writing
  I require left justification with automatic line breaking for anything
  in text mode:
  #+BEGIN_SRC emacs-lisp +n
(add-hook 'text-mode-hook
          (lambda ()
            (auto-fill-mode t)
            (setq default-justification 'left)))
#+END_SRC
** Focus on writing
   I've mapped =[f12]= with =writeroom-mode=, so I can switch quickly to
   a quiet, fullscreen environment with no distraction:
   #+BEGIN_SRC emacs-lisp +n
(use-package writeroom
  :defer t
  :ensure writeroom-mode
  :bind ([f12] . writeroom-mode))
#+END_SRC

** LaTeX
   I use AucTeX with =company-mode=:
   #+BEGIN_SRC emacs-lisp +n
(use-package latex
  :ensure auctex
  :mode ("\\.tex\\'" . latex-mode)
  :bind (:map LaTeX-mode-map ("C-c l" . TeX-error-overview))
  :init
  (use-package company-auctex :init (company-auctex-init))
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (TeX-PDF-mode)
              (turn-on-reftex)
              (TeX-debug-bad-boxes)
              (TeX-debug-warnings)
              (TeX-source-correlate-mode)
              )
            )
  :config
  (setq TeX-parse-self t) ; Enable parse on load.
  (setq TeX-auto-save t) ; Enable parse on save.
  (setq-default TeX-clean-confirm nil)
  (add-hook 'TeX-language-fr-hook
            (lambda () (ispell-change-dictionary "francais")))
  (add-hook 'TeX-language-en-hook
            (lambda () (ispell-change-dictionary "english")))
  )
#+END_SRC
   I also use RefTeX for references management:
   #+BEGIN_SRC emacs-lisp +n
(use-package reftex
  :defer t
  :init
  (setq reftex-plug-into-AUCTeX t)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex))
#+END_SRC

** Watch your language!
   I use =aspell= for spelling:
   #+BEGIN_SRC emacs-lisp +n
(setq ispell-program-name "aspell")
#+END_SRC
   Also, I'm currently trying =writegood= for style checking:
   #+BEGIN_SRC emacs-lisp +n
(use-package writegood-mode
  :bind
  ("C-c g"     . writegood-mode)
  ("C-c C-g g" . writegood-grade-level)
  ("C-c C-g e" . writegood-reading-ease))
#+END_SRC
   Search Thesaurus for synonyms:
#+BEGIN_SRC emacs-lisp +n
  (use-package synosaurus
    :ensure t
    :ensure popup
    :bind (("C-c C-s l" . synosaurus-lookup)
           ("C-c C-s r" . synosaurus-choose-and-replace)
           ("C-c C-s i" . synosaurus-choose-and-insert))
    :config
    (setq-default synosaurus-backend 'synosaurus-backend-wordnet)
    (setq-default synosaurus-choose-method 'popup)
    (add-hook 'after-init-hook #'synosaurus-mode))
#+END_SRC
** PDF
   I sometimes like to open PDFs directly in emacs, which I do with
   PDF-tools:
   #+BEGIN_SRC emacs-lisp +n
(use-package pdf-view
  :ensure pdf-tools
  :mode ("\\.pdf\\'" . pdf-view-mode)
  :config
  (add-hook 'TeX-after-compilation-finished-functions
            #'TeX-revert-document-buffer)
  (setq pdf-annot-activate-created-annotations t)
  )
#+END_SRC
* Mail
  I sometimes read my mail in emacs, with Wanderlust. The "private"
  configuration is in =.wl=, the rest is in the following:
  #+BEGIN_SRC emacs-lisp +n
    (use-package wanderlust
      :commands (wl wl-other-frame)
      :bind ("C-c m" . wl-other-frame)
      :init
      (setq wl-summary-line-format "%T%P %D/%M (%W) %h:%m %t%[%25(%c %f%) %] %s"
            wl-summary-width 150)
      (setq wl-message-ignored-field-list '("^.*:")
            wl-message-visible-field-list
            '("^\\(To\\|Cc\\):"
              "^Subject:"
              "^From:"
              "^Organization:"
              "^\\(Posted\\|Date\\):"
              )
            wl-message-sort-field-list
            '("^From" "^Organization:" "^Subject" "^Date" "^To" "^Cc")
            )
      (setq wl-forward-subject-prefix "Fwd: " )    ;; use "Fwd: " not "Forward: "
      ;; from a WL-mailinglist post by David Bremner
      ;; Invert behaviour of with and without argument replies.
      ;; just the author
      (setq wl-draft-reply-without-argument-list
            '(("Reply-To" ("Reply-To") nil nil)
              ("Mail-Reply-To" ("Mail-Reply-To") nil nil)
              ("From" ("From") nil nil)))
      ;; bombard the world
      (setq wl-draft-reply-with-argument-list
            '(("Followup-To" nil nil ("Followup-To"))
              ("Mail-Followup-To" ("Mail-Followup-To") nil ("Newsgroups"))
              ("Reply-To" ("Reply-To") ("To" "Cc" "From") ("Newsgroups"))
              ("From" ("From") ("To" "Cc") ("Newsgroups"))))
      (setq wl-use-folder-petname '(modeline ask-folder read-folder))
      (setq wl-summary-showto-folder-regexp ".*Sent.*")
      (setq mime-view-buttons-visible nil
            mime-view-mailcap-files '("~/.emacs.d/mailcap")
            mime-play-find-every-situations nil
            mime-play-delete-file-immediately nil)
      (add-hook 'mime-view-mode-hook
                #'(lambda () (setq show-trailing-whitespace nil)))
      )
  #+END_SRC
* Other specific tools
** Passwords
#+BEGIN_SRC emacs-lisp +n
(use-package pass)
#+END_SRC
** CSV
   #+BEGIN_SRC emacs-lisp +n
(use-package csv-mode :mode "\\.[Cc][Ss][Vv]\\'")
   #+END_SRC
** Window$ files
   The following functions handle DOS-style end of lines:
   #+BEGIN_SRC emacs-lisp +n
(defun dos-to-unix ()
  "Cut all visible ^M from the current buffer."
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (while (search-forward "\r" nil t)
      (replace-match ""))))

(defun unix-to-dos ()
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (while (search-forward "\n" nil t)
      (replace-match "\r\n"))))
#+END_SRC
