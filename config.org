#+title: Emacs configuration

* General

This section configures Emacs' built-in features:
1. set the load path for local packages
2. make startup quiet (no welcome message nor splash screen, empty =*scratch*= buffer)
3. smooth scrolling instead of page-by-page
4. use spaces instead of tabs
5. set frames and buffers to be 80 characters wide
6. don't ask for confirmation when killing current buffer, unless there are changes and general key-bindings:
- =[escape]= escapes all
- map =[f1]= and =[f2]= to go to column/line
- map =[²]= completion /via/ dabbrev
#+begin_src emacs-lisp
  (use-package emacs
    :bind
    ([escape] . keyboard-escape-quit)
    ([f1]     . goto-char)
    ([f2]     . goto-line)
    ([?²]     . dabbrev-expand)
    ("C-x k"  . (lambda () (interactive) (kill-buffer (current-buffer))))
    :custom
    (load-path (cons "~/.emacs.d/lisp" load-path) "Path for local packages")
    (load-prefer-newer t)
    ;; Empty startup
    (initial-scratch-message nil "Empty scratch buffer")
    (inhibit-startup-message t "No startup screen")
    (inhibit-startup-echo-area-message "" "No startup message")
    ;; Smooth scrolling
    (scroll-margin 3 "Top/bottom margin when scrolling")
    (scroll-conservatively 101)
    (scroll-up-aggressively 0.01)
    (scroll-down-aggressively 0.01)
    (scroll-preserve-screen-position t)
    (auto-window-vscroll nil)
    (hscroll-margin 5)
    (hscroll-step 5)
    ;; Misc.
    (indent-tabs-mode nil "Replace tabs with spaces")
    (fill-column 80 "Break lines at 80 characters")
    :config
    ;; Create new frames with 80 characters width
    (add-to-list 'default-frame-alist '(width . 81)) ; why do I need 81 here?
  )
#+end_src

* Customizations

I don't store customizations. Also, don't ask for confirmation when loading a theme.
#+begin_src emacs-lisp
  (use-package custom
    :custom
    (custom-file null-device "Don't store customizations")
    (custom-safe-themes t "Treat all themes as safe")
    )
#+end_src

* Fonts

If available on the system, I like the "Fira Code" or "Hack" fonts. Otherwise I use "DejaVu". For variable pitch, I go with FiraGo:
#+begin_src emacs-lisp
  (use-package faces
    :custom
    (face-font-family-alternatives
     '(("Fira Code" "Hack" "DejaVu Sans Mono" "courier" "fixed")
       ("ETBembo" "FiraGO" "DejaVu Sans" "CMU Typewriter Text" "Courier 10 Pitch")))
    :custom-face
    (default ((t (:family "Fira Code" :height 120))))
    (fixed-pitch ((t (:inherit default))))
    ;; (variable-pitch ((t (:family "ETBembo" :height 120))))
    (variable-pitch ((t (:family "FiraGO" :height 120))))
    )
#+end_src

In Org and LaTeX modes, I like to use variable pitch font. I use mixed-pitch mode to have code blocks, commands, etc. in fixed pitch, as well as a correct indentation:
#+begin_src emacs-lisp
  (use-package mixed-pitch
    :hook
    (org-mode . mixed-pitch-mode)
    (LaTeX-mode . mixed-pitch-mode)
    :custom (mixed-pitch-set-height t)
    :config (set-face-attribute 'variable-pitch nil :height 1.0))
#+end_src

Fira Code supports some ligatures, which I really enjoy in programming modes:
#+begin_src emacs-lisp
  (use-package ligature
    :config
    (ligature-set-ligatures
     't
     '("www"
       "0xA" "0xB" "0xC" "0xD" "0xE" "0xF"
       "0x0" "0x1" "0x2" "0x3" "0x4" "0x5" "0x6" "0x7" "0x8" "0x9"))
    (ligature-set-ligatures 'text-mode '("ff" "fi" "ffi" "..."))
    (ligature-set-ligatures
     'prog-mode
     '("**/" "\\\\\\" "{-" "-}" "----" "\\\\" "://"
       "<|||" "|||>" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
       ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
       "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
       "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
       "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
       "&&" "^=" "~~" "~@" "~=" "_|_" "///" "/==" "+++"
       "||" "|}" "|]" "|=" "|>" "|-" "{|" "**" "*>" "*/" "~-" "~>"
       "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
       "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:" ">-" ">>" ">="
       "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
       "##" "#(" "#?" "#_" "%%" ".=" ".-" ".?" "+>" "++" "?:"
       "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "(*" "*)"
       ;; ".." "..." those break python-mode as of emacs 27.1
       ))
    (global-ligature-mode t)
    )
#+end_src

I use fancy icons in several places (modeline, Ivy, Org bullets, etc.).
#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t
    :config
    (set-fontset-font t 'unicode (font-spec :family "all-the-icons") nil 'append)
    (set-fontset-font t 'unicode (font-spec :family "file-icons") nil 'append)
    (set-fontset-font t 'unicode (font-spec :family "github-octicons") nil 'append)
    (set-fontset-font t 'unicode (font-spec :family "FontAwesome") nil 'append)
    (set-fontset-font t 'unicode (font-spec :family "Weather Icons") nil 'append)
    (set-fontset-font t 'unicode (font-spec :family "Material Icons") nil 'append)
    )
#+end_src

* Package management

Automatically trigger compilation when loading a new package:
#+begin_src emacs-lisp
  (use-package auto-compile :config (auto-compile-on-load-mode))
#+end_src

If system packages are missing, install them:
#+begin_src emacs-lisp
  (use-package system-packages :ensure t)
  (use-package use-package-ensure-system-package :ensure t)
#+end_src

Use =paradox= instead of the default package management interface:
#+begin_src emacs-lisp
  (use-package paradox
    :ensure t
    :config (paradox-enable))
#+end_src

* Aesthetics
** Layout

Cleaner frames by:
- removing menu bar and tool bar;
- removing visual scroll bar;
- making the fringe a bit larger to have some room on the sides.
Also, I don't need the tooltips, so let's remove them as well.
#+begin_src emacs-lisp
  (use-package menu-bar :custom (menu-bar-mode nil))
  (use-package tool-bar :custom (tool-bar-mode nil))
  (use-package scroll-bar :custom (scroll-bar-mode nil))
  (use-package tooltip :custom (tooltip-mode nil))
  (use-package fringe :config (set-fringe-mode 15))
#+end_src

** Where am I

To navigate, I like to see line numbers (included in my modeline), as well as the current line in programming modes:
#+begin_src emacs-lisp
  ;; (line-number-mode t)
  ;; (column-number-mode t)
  (use-package hl-line :hook (prog-mode . hl-line-mode))
#+end_src

I want a (light) paren matching information:
#+begin_src emacs-lisp
  (use-package paren :config (show-paren-mode t))
#+end_src

** Theme

I mainly use Doom themes, and define light and dark variants which I change system-wide by a call to emacsclient:
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :custom
    (doom-themes-enable-bold t)
    (doom-themes-enable-italic t)
    :config
    (doom-themes-neotree-config)
    (doom-themes-org-config)
    (when (>= emacs-major-version 27)
      (with-eval-after-load 'org
        (dolist (face '(org-block
                        org-block-begin-line
                        org-block-end-line
                        org-level-1
                        org-quote))
          (set-face-attribute face nil :extend t))))
    :init
    (defvar *my-theme-light* 'doom-tomorrow-day)
    (defvar *my-theme-dark* 'doom-vibrant)
    (load-theme *my-theme-dark*)
    )
#+end_src

** Modeline

To get along the theme, I use the Doom modeline with fancy icons:
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :custom
    (doom-modeline-buffer-file-name-style 'buffer-name)
    (doom-modeline-icon t)
    (doom-modeline-major-mode-icon nil)
    (doom-modeline-major-mode-color-icon t)
    (doom-modeline-buffer-state-icon t)
    (doom-modeline-buffer-modification-icon nil)
    ;; (doom-modeline-enable-word-count t)
    (doom-modeline-buffer-encoding nil)
    (doom-modeline-env-python-executable "python3")
    (doom-modeline-bar-width 1)
    (doom-modeline-mu4e t)
    :hook (after-init . doom-modeline-mode)
    )
#+end_src

=[C-x _]= to hide the modeline:
#+begin_src emacs-lisp
  (use-package hide-mode-line
    :ensure t
    :bind (("C-x _" . hide-mode-line-mode))
    )
#+end_src

* General behavior and tools
** Files

I don't want emacs to fill my directories with save files, so I store them to a spacific place (/e.g./: =~/.emacs.d/backups=). Also, I hate trailing white space, so I remove it on save:
#+begin_src emacs-lisp
  (use-package files
    :hook
    (before-save . delete-trailing-whitespace)
    :bind
    ([f5] . (lambda () (interactive) (revert-buffer nil t nil)))
    :custom
    (require-final-newline t)
    (backup-by-copying t)
    (backup-directory-alist
     `((".*" . ,(expand-file-name
                 (concat user-emacs-directory "backups")))))
    (delete-old-versions t)
    (kept-new-versions 6)
    (kept-old-versions 2)
    (version-control t))
#+end_src

** History

I keep an history of recent files/commands:
#+begin_src emacs-lisp
  (use-package savehist
    :ensure t
    :custom
    (savehist-file "~/.emacs-history")
    (savehist-length 1000)
    :config
    (savehist-mode +1))
#+end_src

** Key bindings

Making it easier to discover Emacs key presses.
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :diminish which-key-mode
    :init (which-key-mode)
    :custom
    (which-key-idle-delay 1.0)
    (which-key-idle-secondary-delay 0.05)
    :config
    (which-key-setup-side-window-bottom)
    )
#+end_src

** Buffers

Handling buffer list with iBuffer (built-in):
#+begin_src emacs-lisp
  (use-package ibuffer :bind ("C-x C-b" . ibuffer))
#+end_src

** Mini-buffer

I want to ignore case in the mini-buffer for filename completion (this might become obsolete with the use of Ivy):
#+begin_src emacs-lisp
  (use-package minibuffer
    :custom
    (read-file-name-completion-ignore-case t)
    )
#+end_src

Replace usual commands by Ivy/Counsel/Swiper to have better, fuzzy completion:
#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    :bind
    ("C-s" . swiper)
    :custom
    (ivy-use-virtual-buffers t)
    (ivy-height 20)
    (ivy-count-format "")
    (ivy-initial-inputs-alist nil)
    (ivy-extra-directories nil)
    :config
    (ivy-mode 1)
    (counsel-mode 1)
    (setq ivy-re-builders-alist '((t . ivy--regex-ignore-order)))
    )
#+end_src

Also drop-in some fancy icons whenever possible...
#+begin_src emacs-lisp
  (use-package all-the-icons-ivy
    :ensure t
    :init (add-hook 'after-init-hook 'all-the-icons-ivy-setup)
    )
#+end_src

Better sorting for Ivy:
#+begin_src emacs-lisp
  (use-package ivy-prescient
    :ensure t
    :after (ivy counsel)
    :config (ivy-prescient-mode))
#+end_src

Making Ivy lists a bit more informative:
#+begin_src emacs-lisp
  (use-package ivy-rich
    :ensure t
    :after (ivy counsel)
    :custom
    (ivy-rich-path-style 'abbrev)
    :config
    (ivy-rich-project-root-cache-mode 1)
    (ivy-rich-mode 1)
    )

  (use-package all-the-icons-ivy-rich
    :ensure t
    :after (ivy-rich)
    :config (all-the-icons-ivy-rich-mode 1)
    )
#+end_src

** Completion

I use Company for completion, with an on-demand setup bound to =[C-<tab>]=:
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :hook (after-init . global-company-mode)
    :bind
    (("C-<tab>" . company-complete)
     :map company-active-map
     ("<tab>" . company-complete-common-or-cycle))
    :custom
    (company-idle-delay nil "on-demand completion")
    (company-minimum-prefix-length 0)
    (company-show-numbers t)
    (company-selection-wrap-around t)
    )
#+end_src

** Useful shortcuts with Crux

The Crux package provides some useful functions for line, buffer of file manipulation. I map a few of those functions to the suggested key combinations:
#+begin_src emacs-lisp
  (use-package crux
    :ensure t
    :bind
    (("C-a" . crux-move-beginning-of-line)
     ("C-c o" . crux-open-with)
     ("C-c r" . crux-rename-file-and-buffer)
     )
    )
#+end_src

** Window navigation

Move around with M-<up>, M-<down>, M-<left> and M-<right>, using windmove (this does not work in Org mode since those keybindings are used to move sections around):
#+begin_src emacs-lisp
  (use-package windmove
    :config (windmove-default-keybindings 'meta)
    )
#+end_src

** Parentheses navigation

Using smartparens to navigate s-expressions:
#+begin_src emacs-lisp
  (use-package smartparens-config
    :ensure smartparens
    :commands
    (smartparens-mode sp-with-modes sp-local-pair sp-pair)
    :hook ((conf-mode text-mode prog-mode) . smartparens-mode)
    :config
    (sp-local-pair 'minibuffer-inactive-mode "'" nil :actions nil)
    :bind
    (:map sp-keymap
          ("C-M-f"     . sp-forward-sexp)
          ("C-M-b"     . sp-backward-sexp)
          ("C-F"       . sp-forward-symbol)
          ("C-B"       . sp-backward-symbol)
          ("C-M-n"     . sp-next-sexp)
          ("C-M-p"     . sp-previous-sexp)
          ("C-M-a"     . sp-beginning-of-sexp)
          ("C-M-e"     . sp-end-of-sexp)
          ("C-M-k"     . sp-kill-sexp)
          ("C-M-w"     . sp-copy-sexp)
          ("C-c s u"   . sp-up-sexp)
          ("C-c s d"   . sp-down-sexp)
          ("C-c s t"   . sp-prefix-tag-object)
          ("C-c s p"   . sp-prefix-pair-object)
          ("C-c s c"   . sp-convolute-sexp)
          ("C-c s a"   . sp-absorb-sexp)
          ("C-c s e"   . sp-emit-sexp)
          ("C-c s p"   . sp-add-to-previous-sexp)
          ("C-c s n"   . sp-add-to-next-sexp)
          ("C-c s j"   . sp-join-sexp)
          ("C-c s s"   . sp-split-sexp)
          ("C-c s ("   . sp-wrap-round)
          ("C-c s ["   . sp-wrap-square)
          ("C-c s {"   . sp-wrap-curly)
          ("C-c ("     . sp-wrap-round)
          ("C-c ["     . sp-wrap-square)
          ("C-c {"     . sp-wrap-curly)
          ("M-("       . sp-backward-unwrap-sexp)
          ("M-)"       . sp-unwrap-sexp)
          ("C-M-right" . sp-forward-slurp-sexp)
          ("C-s-right" . sp-forward-barf-sexp)
          ("C-M-left"  . sp-backward-slurp-sexp)
          ("C-s-left"  . sp-backward-barf-sexp)
          )
    :diminish smartparens-mode)
    ;;  "C-M-t" 'sp-transpose-sexp
    ;;  "M-D" 'sp-splice-sexp
    ;;  "C-M-[" 'sp-select-previous-thing
    ;;  "C-M-]" 'sp-select-next-thing

#+end_src

** Directory navigation

Now and then, it is useful to navigate files in a directory tree. I do this with =neotree=, which I bind to =[f3]= (not so useful, consider removing it):
#+begin_src emacs-lisp
  (use-package neotree
    :ensure t
    :bind ([f3] . neotree-toggle)
    :config
    (doom-themes-neotree-config)
    )
#+end_src

Set up dired to be used as a file chooser for e-mail attachments:
#+begin_src emacs-lisp
  (use-package dired
    :hook (dired-mode . turn-on-gnus-dired-mode)
    )
#+end_src

** Cursors

In some occasions, like refactoring, having multiple cursors visually helps:
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :bind
    (("C->" . mc/mark-next-like-this)
     ("C-<" . mc/mark-previous-like-this)
     ("C-* C-*" . mc/mark-all-like-this)
     ("C-* C-a" . mc/edit-beginnings-of-lines)
     ("C-* C-e" . mc/edit-ends-of-lines)
     ("C-* C-i" . mc/insert-numbers))
    )
#+end_src

** Snippets

Quickly get the boiler-plate code by using code snippets:
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :hook ((prog-mode  . yas-minor-mode)
           (org-mode   . yas-minor-mode)
           (latex-mode . yas-minor-mode))
    :config
    (use-package yasnippet-snippets :ensure t)
    (yas-reload-all)
    )
#+end_src

** Pop-up shell

=[C--t]= toggles a true terminal in a pop-up window below:
#+begin_src emacs-lisp
  (use-package shell-pop
    :ensure t
    :custom
    (shell-pop-universal-key "C-s-t")
    (shell-pop-shell-type
     (quote ("ansi-term" "*ansi-term*" (lambda nil (ansi-term shell-pop-term-shell)))))
    (shell-pop-term-shell "/bin/bash")
    (shell-pop-window-size 30)
    (shell-pop-full-span t)
    (shell-pop-position "bottom")
    (shell-pop-autocd-to-working-dir t)
    )
#+end_src

* Org

Define some prettification symbols for todos and blocks:
#+begin_src emacs-lisp
  (defun org-pretty-marking ()
    "Beautify Org structure"
    (setq prettify-symbols-alist
          '(("[ ]" . "") ("[X]" . "") ("[-]" . "")
            ("#+begin_src" . "⌜") ("#+end_src" . "⌞")
            ("#+begin_quote" . "") ("#+end_quote" . "")
            ("TODO" . "") ("DONE" . "") ("STARTED" . "")
            ("WAITING" . "") ("HOLD" . "") ("CANCELLED" . "")
            ("ISSUE" . "") ("BRANCH" . "") ("FORK" . "")
            ("PR" . "") ("MERGED" . "")
            ("WRITING" . "") ("WRITE" . "")))
    (prettify-symbols-mode)
    )
#+end_src

Main Org-mode setup:
#+begin_src emacs-lisp
  (use-package org
    :bind
    (("C-c l" . org-store-link)
     ("C-c a" . org-agenda)
     ("C-c c" . org-capture))
    :hook
    (org-mode . org-pretty-marking)
    :custom
    (org-src-fontify-natively t "Colorize code in code blocks")
    (org-src-tab-acts-natively t "Tab in code blocks acts as expected")
    (org-src-window-setup 'current-window "Where to edit code blocks (C-')")
    (org-startup-indented t "Indent according to structure")
    (org-fontify-done-headline t "Dim DONE items")
    (org-hide-emphasis-markers t "Markup symbols are hidden")
    (org-hidden-keywords '(title date author email))
    (org-ellipsis " " "Unfold marker")
    (org-pretty-entities t "Show UTF8 symbols")
    (org-format-latex-options (plist-put org-format-latex-options :scale 1.5))
    (org-image-actual-width nil "Enable resizing image inline preview")
    (org-todo-keywords
     '((sequence "TODO(t)" "STARTED(s)" "|" "DONE(d)")
       (sequence "ISSUE(i)" "FORK(f)" "BRANCH(b)" "PR(p)" "|" "MERGED(m)")
       (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)")))
    (org-todo-keyword-faces
     '(("WAITING" . org-warning) ("HOLD" . org-warning)))
    (org-enforce-todo-dependencies t)
    ;; (org-log-done 'time)
    (org-directory "~/cloud/org")
    (org-agenda-files '("~/cloud/org"))
    (org-default-notes-file "~/cloud/org/refile.org")
    (org-agenda-include-diary nil)
    (org-agenda-diary-file "~/cloud/org/diary.org")
    (org-refile-targets (quote ((nil :maxlevel . 4)
                                (org-agenda-files :maxlevel . 4))))
    (org-refile-allow-creating-parent-nodes (quote confirm))
    (org-refile-use-outline-path t)
    (org-outline-path-complete-in-steps nil)
    :init
    (setq org-agenda-ndays 10
          org-agenda-start-on-weekday nil)
    (setq org-latex-inputenc-alist '(("utf8" . "utf8x")))
    (add-to-list 'org-latex-default-packages-alist '("mathletters" "ucs"))
    (add-to-list 'org-latex-packages-alist '("" "minted"))
    (add-to-list 'org-latex-packages-alist '("" "mathpazo"))
    (setq org-latex-listings 'minted
          org-latex-pdf-process
          '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
            "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f")
          )
    )
#+end_src

Capture templates are taken from [[http://doc.norang.ca/org-mode.html#OrgFiles][here]].
#+begin_src emacs-lisp
  (use-package org-capture
    :custom
    (org-capture-templates
     (quote (("t" "Task" entry (file "~/cloud/org/refile.org")
              "* TODO %?\n%U\n%a\n" :empty-lines 1)
             ("n" "Note" entry (file "~/cloud/org/refile.org")
              "* %? :NOTE:\n%U\n%a\n" :empty-lines 1)
             ("j" "Journal" entry (file+datetree "~/cloud/org/journal.org")
              "* %?\n%U\n" :empty-lines 1)
             ("m" "Meeting" entry (file "~/cloud/org/refile.org")
              "* MEETING with %? :MEETING:\n%U"
              :clock-in t :clock-resume t :empty-lines 1)
             ("p" "Phone call" entry (file "~/cloud/org/refile.org")
              "* PHONE CALL with %? :PHONE:\n%U"
              :clock-in t :clock-resume t :empty-lines 1))))
    )
#+end_src

Holidays where I live:
#+begin_src emacs-lisp
  (use-package french-holidays)
  (setq calendar-holidays holiday-french-holidays)
#+end_src

Code blocks:
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (ocaml . t)
     (python . t)
     (R . t)))
  (setq org-babel-python-command "python3")
  (setq org-confirm-babel-evaluate nil)
#+end_src

Prettify todo bullets and remove heading stars:
#+begin_src emacs-lisp
  (use-package org-superstar
    :ensure t
    :after org
    :hook (org-mode . org-superstar-mode)
    :custom
    (org-superstar-remove-leading-stars t)
    (org-superstar-headline-bullets-list '(" "))
    (org-superstar-todo-bullet-alist
     '(("DONE" . ?) ("TODO" . ?) ("STARTED" . ?)
       ("WAITING" . ?) ("HOLD" . ?) ("CANCELLED" . ?)
       ("ISSUE" . ?) ("BRANCH" . ?) ("FORK" . ?)
       ("PR" . ?) ("MERGED" . ?) ("GITHUB" . ?)
       ("WRITING" . ?) ("WRITE" . ?)))
    (org-superstar-special-todo-items t)
    (org-superstar-leading-bullet ?\s)
    )
#+end_src

Any marking that is masked re-appears when under the cursor:
#+begin_src emacs-lisp
  (use-package org-appear
    :ensure t
    :hook (org-mode . org-appear-mode)
    :custom
    (org-appear-autolinks t)
    (org-appear-autosubmarkers t)
    (org-appear-autoentities t)
    (org-appear-autokeywords t)
    )
#+end_src

Prettier tags:
#+begin_src emacs-lisp
  (use-package org-pretty-tags
    :ensure t
    :custom
    (org-pretty-tags-surrogate-strings
     '(("audio" . "") ("music" . "") ("video" . "") ("book" . "")
       ("teaching" . "") ("research" . "") ("code" . "")
       ("email" . "") ("message" . "")
       ("car" . "") ("bike" . "")
       ("finances" . "") ("shopping" . "") ("travel" . "")
       ("urgent" . "")
       )
     )
    :config
    (org-pretty-tags-global-mode t)
    )
#+end_src

* Programming

Show hidden symbols under cursor:
#+begin_src emacs-lisp
  (use-package prog-mode
    :custom
    (prettify-symbols-unprettify-at-point 'right-edge)
    )
#+end_src

** Compilation

Automatically kill existing compilation process, save buffers, jump to first error. Keybindings:
- =[f6]= to compile;
- =[f8]= and =[⇑-f8]= to navigate errors.
#+begin_src emacs-lisp
  (use-package compile
    :bind
    ([f6] . compile)
    ([f8] . next-error)
    ([shift f8] . previous-error)
    :custom
    (compilation-always-kill t)
    (compilation-ask-about-save nil)
    (compilation-auto-jump-to-first-error t))
#+end_src

** Git

I use Magit for version control management with diff-hl as a diff tool:
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :bind ("C-x g" . magit-status))

  (use-package magit-todos :ensure t)

  (use-package diff-hl
    :ensure t
    :hook
    (magit-post-refresh . diff-hl-magit-post-refresh)
    (prog-mode . diff-hl-mode))
#+end_src

** Coq

For interactive Coq proving, I use Proof General:
#+begin_src emacs-lisp
  (use-package proof-general
    :mode ("\\.v\\'" . coq-mode)
    :custom
    (proof-splash-enable nil)
    (proof-sticky-errors t)
    )
#+end_src

For convenience, I also use =company-coq=, with an extended symbols list:
#+begin_src emacs-lisp
  (use-package company-coq
    :ensure t
    :commands (company-coq-mode)
    :hook (coq-mode . company-coq-mode)
    :custom
    (company-coq-disabled-features '(hello company-defaults))
    (coq-compile-before-require t)
    :config
    (setq
     coq-symbols-list
     (lambda ()
       (setq-local prettify-symbols-alist
                   '((":=" . ?≜) ("Proof." . ?∵) ("~" . ?¬) ("empty" . ?Ø)
                     ("*" . ?×) ("\\in" . ?\u220A) ("~exists" . ?\u2204)
                     ("Qed." . ?■) ("Defined." . ?□)
                     ("==>*" . (?\u27F9 (Br . Bl) ?*))
                     ("=?" . ?\u225F) ("<=?" . (?\u2264 (Br . Bl) ??))
                     ("\\|" . ?\u21D3) ("[|" . ?\u27E6) ("|]" . ?\u27E7)
                     ("\\(" . ?\u27E8) ("\\)" . ?\u27E9)
                     ("\\:" . ?\u2236) ("|=" . ?\u22A7) ("|->" . ?\u21A6)
                     ("Gamma'" . (?Γ (Br . Bl) ?'))
                     ("Gamma''" . (?Γ (Br . Bl) ?' (Br . Bl) ?'))
                     ("Gamma0" . (?Γ (Br . Bl) ?0))
                     ("Gamma1" . (?Γ (Br . Bl) ?1))
                     ("Gamma2" . (?Γ (Br . Bl) ?2))
                     ("sigma'" . (?σ (Br . Bl) ?'))
                     ("sigma''" . (?σ (Br . Bl) ?' (Br . Bl) ?'))
                     ("sigma0" . (?σ (Br . Bl) ?0))
                     ("sigma1" . (?σ (Br . Bl) ?1))
                     ("sigma2" . (?σ (Br . Bl) ?2))
                     ;; same as other capital letters -> confusing
                     ;; ("Alpha" . ?Α) ("Beta" . ?Β) ("Epsilon" . ?Ε) ("Zeta" . ?Ζ)
                     ;; ("Eta" . ?Η) ("Iota" . ?Ι) ("Kappa" . ?Κ) ("Mu" . ?Μ)
                     ;; ("Nu" . ?Ν) ("Omicron" . ?Ο) ("Rho" . ?Ρ) ("Tau" . ?Τ)
                     ;; ("Upsilon" . ?Υ) ("Chi" . ?Χ)
                     ;; OK
                     ("Gamma" . ?Γ) ("Delta" . ?Δ) ("Theta" . ?Θ) ("Lambda" . ?Λ)
                     ("Xi" . ?Ξ) ("Pi" . ?Π) ("Sigma" . ?Σ) ("Phi" . ?Φ)
                     ("Psi" . ?Ψ) ("Omega" . ?Ω)
                     ("alpha" . ?α) ("beta" . ?β) ("gamma" . ?γ)
                     ("delta" . ?δ) ("epsilon" . ?ε) ("zeta" . ?ζ)
                     ("eta" . ?η) ("theta" . ?θ) ("iota" . ?ι)
                     ("kappa" . ?κ) ("mu" . ?μ)
                     ("nu" . ?ν) ("xi" . ?ξ) ("omicron" . ?ο)
                     ("pi" . ?π) ("rho" . ?ρ) ("sigma" . ?σ)
                     ("tau" . ?τ) ("upsilon" . ?υ) ("phi" . ?φ)
                     ("chi" . ?χ) ("psi" . ?ψ)
                     ;; also confusing?
                     ("lambda" . ?λ) ("omega" . ?ω)
                     ))))
    (add-hook 'coq-mode-hook coq-symbols-list)
    (add-hook 'coq-goals-mode-hook coq-symbols-list)
    (put 'company-coq-fold 'disabled nil)
    )
#+end_src

** OCaml

For OCaml, I use a combination of Tuareg, Merlin (with company) and utop. All of this being configured to work with my opam-based OCaml distribution:
#+begin_src emacs-lisp
  (use-package utop
    :ensure t
    :hook (tuareg-mode . utop-minor-mode)
    :init
    (autoload 'utop-minor-mode "utop" "Minor mode for utop" t)
    (setq utop-command "opam config exec -- utop -emacs"))
#+end_src

#+begin_src emacs-lisp
  (use-package tuareg
    :ensure t
    :mode
    ("_oasis\\'" . conf-mode)
    ("_tags\\'" . conf-mode)
    ("_log\\'" . conf-mode)
    :custom
    (tuareg-match-patterns-aligned t)
    :init
    ;; Setup environment variables using opam
    (dolist
        (var (car (read-from-string
                   (shell-command-to-string "opam config env --sexp"))))
      (setenv (car var) (cadr var)))
    (setq exec-path (split-string (getenv "PATH") path-separator))
    (push (concat (getenv "OCAML_TOPLEVEL_PATH")
                  "/../../share/emacs/site-lisp") load-path)
    (dolist (ext '(".cmo" ".cmx" ".cma" ".cmxa" ".cmi" ".cmt" ".cmti"
                   ".cmxs" ".annot" ".depends"))
      (add-to-list 'completion-ignored-extensions ext))
    ;; :config
    ;; (setq tuareg-prettify-symbol-mode t)
    )
#+end_src

#+begin_src emacs-lisp
  (use-package dune
    :ensure t
    :mode ("dune\\'" . dune-mode))

  (use-package merlin-mode
    :ensure merlin
    :hook tuareg-mode
    :custom (merlin-command 'opam)
    :init
    (with-eval-after-load 'company
      (add-to-list 'company-backends 'merlin-company-backend))
    )
#+end_src

** Python

Here I just set-up the interpreter to be Python 3 (not necessary on most recent Linux systems) and a few symbols:
#+begin_src emacs-lisp
  (use-package python
    :ensure t
    :mode ("\\.py\\'" . python-mode)
    ;;:custom (python-shell-interpreter "python3")
    :config
    (which-function-mode -1)
    (add-hook
     'python-mode-hook
     (lambda ()
       (mapc (lambda (pair) (push pair prettify-symbols-alist))
             '(;; Syntax
               ("not" .      #x2757)
               ("in" .       #x2208)
               ("not in" .   #x2209)
               ("return" .   #x27fc)
               ("yield" .    #x27fb)
               ("for" .      #x2200)
               ;; Base Types
               ("int" .      #x2124)
               ("float" .    #x211d)
               ("str" .      #x1d54a)
               ("True" .     #x1d54b)
               ("False" .    #x1d53d)))))
    )
#+end_src

** Smala

#+begin_src emacs-lisp
  (use-package smala-mode :mode "\\.sma\\'")
#+end_src

** BNF

Edit formal grammars:
#+begin_src emacs-lisp
  (use-package bnf-mode :ensure t :mode "\\.bnf\\'")
#+end_src

** Emacs Lisp

Better help for elisp:
#+begin_src emacs-lisp
  (use-package helpful
    :ensure t
    :bind
    ([remap describe-function] . helpful-function)
    ([remap describe-symbol]   . helpful-symbol)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-command]  . helpful-command)
    ([remap describe-key]      . helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    )
#+end_src

* Writing

In text mode (and derived) I use visual-line-mode to wrap lines, in cunjunction to visual-fill-column-mode to bound the length of a visual line:
#+begin_src emacs-lisp
  (use-package text-mode
    :hook
    (text-mode . visual-line-mode)
    (text-mode . visual-fill-column-mode)
    )
#+end_src

** Focus on writing

I've mapped =[f12]= with =writeroom-mode=, so I can switch quickly to a quiet, fullscreen environment with no distraction:
#+begin_src emacs-lisp
  (use-package writeroom
    :ensure writeroom-mode
    :bind ([f12] . writeroom-mode)
    :custom (writeroom-width 90)
    )
#+end_src

** LaTeX

I use AucTeX with =company-mode=:
#+begin_src emacs-lisp
  (use-package latex
    :ensure auctex
    :mode ("\\.tex\\'" . latex-mode)
    :bind (:map LaTeX-mode-map ("C-c l" . TeX-error-overview))
    :custom
    (TeX-parse-self t "Enable parse on load")
    (TeX-auto-save t "Enable parse on save")
    (TeX-clean-confirm nil "Just clean already")
    (TeX-PDF-mode t "Directly build PDF")
    (TeX-source-correlate-mode t "Jump to relevant part in the PDF")
    ;; (TeX-debug-bad-boxes t) great, but can be annoying...
    ;; (TeX-debug-warnings t)
    :hook
    (TeX-language-fr . (lambda () (ispell-change-dictionary "francais")))
    (TeX-language-en . (lambda () (ispell-change-dictionary "english")))
    )

  (use-package company-auctex :init (company-auctex-init))
#+end_src

I also use RefTeX for references management:
#+begin_src emacs-lisp
  (use-package reftex
    :ensure t
    :custom (reftex-plug-into-AUCTeX t)
    :hook (LaTeX-mode . (lambda () (turn-on-reftex)))
    )
#+end_src

** Watch your language!

I use =aspell= for spelling:
#+begin_src emacs-lisp
  (use-package ispell
    :custom
    (ispell-program-name "aspell"))
#+end_src

Also, I'm currently trying =writegood= for style checking:
#+begin_src emacs-lisp
  (use-package writegood-mode
    :ensure t
    :bind
    ("C-c g"     . writegood-mode)
    ("C-c C-g g" . writegood-grade-level)
    ("C-c C-g e" . writegood-reading-ease))
#+end_src

Search Thesaurus for synonyms:
#+begin_src emacs-lisp
  (use-package synosaurus
    :ensure t
    :ensure popup
    :bind (("C-c C-s l" . synosaurus-lookup)
           ("C-c C-s r" . synosaurus-choose-and-replace)
           ("C-c C-s i" . synosaurus-choose-and-insert))
    :custom
    (synosaurus-backend 'synosaurus-backend-wordnet)
    (synosaurus-choose-method 'popup)
    :hook
    (after-init . synosaurus-mode))
#+end_src

** PDF

I sometimes like to open PDFs directly in emacs, which I do with PDF-tools:
#+begin_src emacs-lisp
  (use-package pdf-view
    :ensure pdf-tools
    :mode ("\\.pdf\\'" . pdf-view-mode)
    :custom
    (pdf-annot-activate-created-annotations t)
    :config
    (add-hook 'TeX-after-compilation-finished-functions
              #'TeX-revert-document-buffer)
    )
#+end_src

* Mail

Composing using message mode:
#+begin_src emacs-lisp
  (use-package message
    :custom
    (message-kill-buffer-on-exit t "Kill the compose buffer after sending")
    (message-send-mail-function 'sendmail-send-it "Send using sendmail")
    (message-sendmail-envelope-from 'header "Select right sender from context")
    )
#+end_src

Sending with sendmail:
#+begin_src emacs-lisp
  (use-package smtpmail)

  (use-package sendmail
    :custom
    (sendmail-program "msmtp" "Send using msmtp")
    (send-mail-function 'sendmail-send-it "Send using the sendmail-program")
    )
#+end_src

Main mu4e configuration:
#+begin_src emacs-lisp
  (use-package mu4e
    :hook
    (mu4e-view-mode . visual-line-mode)
    :bind
    ([f4] . mu4e)
    ("C-x m" . mu4e-compose-new)
    :custom
    (mu4e-hide-index-messages t "Don't show update message in minibuffer")
    (mu4e-use-fancy-chars t)
    (mu4e-view-show-images t)
    (mu4e-compose-in-new-frame t)
    (mu4e-maildir "~/.mail" "Home for my mail")
    (mu4e-get-mail-command "mbsync -a" "Sync mail with isync")
    (mu4e-update-interval 300 "Sync interval (seconds)")
    (mu4e-attachment-dir "~/.mail/attachments" "Where to save attachments")
    (mu4e-change-filenames-when-moving t "Needed for mbsync")
    (mu4e-compose-signature-auto-include nil "Input signature on demand only (C-c C-w)")
    (mu4e-context-policy 'pick-first "Choose the first defined context as default")
    (mu4e-confirm-quit nil "Quit mu4e without asking for confirmation")
    :config
    (setq mu4e-main-buffer-name "*Mail*")
    )
#+end_src

Contexts for multiple accounts are defined in my =private.el=.

Make the header view fancier:
#+begin_src emacs-lisp
  (use-package mu4e-headers
    :after mu4e
    :custom
    (mu4e-headers-fields '(;;(:empty         .   0)
                           ;; (:mailing-list  .   7)
                           ;; (:subject       .  42)
                           (:thread-subject .  42)
                           (:from           .  22)
                           (:human-date     .  10)
                           (:flags          .   4)
                           ))
    :config
    (setq mu4e-headers-draft-mark     '("D" . "")
          mu4e-headers-flagged-mark   '("F" . "")
          mu4e-headers-new-mark       '("N" . "")
          mu4e-headers-passed-mark    '("P" . "")
          mu4e-headers-replied-mark   '("R" . "")
          mu4e-headers-seen-mark      '("S" . "")
          mu4e-headers-trashed-mark   '("T" . "")
          mu4e-headers-attach-mark    '("a" . "")
          mu4e-headers-encrypted-mark '("x" . "")
          mu4e-headers-signed-mark    '("s" . "")
          mu4e-headers-unread-mark    '("u" . "")
          )
    (setq mu4e-headers-thread-root-prefix          '("" . "")
          mu4e-headers-thread-first-child-prefix   '("| " . "| ")
          mu4e-headers-thread-child-prefix         '("| " . "| ")
          mu4e-headers-thread-last-child-prefix    '("| " . "| ")
          mu4e-headers-thread-connection-prefix    '("| " . "| ")
          mu4e-headers-thread-blank-prefix         '(""   . "")
          mu4e-headers-thread-orphan-prefix        '(""   . "")
          mu4e-headers-thread-single-orphan-prefix '("| " . "| ")
          mu4e-headers-thread-duplicate-prefix     '("="  . "="))
    )
#+end_src

Folding in header view, thanks to Nicolas Rougier:
#+begin_src emacs-lisp
  (use-package mu4e-thread-folding
    :hook (mu4e-headers-mode . mu4e-thread-folding-mode)
    :custom
    (mu4e-thread-folding-root-folded-prefix-string " ▸")
    (mu4e-thread-folding-root-unfolded-prefix-string " ▾")
    (mu4e-thread-folding-default-view 'folded)
    :config
    (add-to-list 'mu4e-header-info-custom
                 '(:empty . (:name "Empty"
                                   :shortname "    "
                                   :function (lambda (msg) "  "))))
    )
#+end_src

Display unread messages in the modeline:
#+begin_src emacs-lisp
  (use-package mu4e-alert
    :ensure t
    :init
    (add-hook 'after-init-hook #'mu4e-alert-enable-mode-line-display)
    )
#+end_src

* Other specific tools
** Passwords

Utilities to edit and retrieve from password-store:
#+begin_src emacs-lisp
  (use-package pass :ensure t)
  (use-package ivy-pass :ensure t)
#+end_src

** Configuration files

Modes for system files:
#+begin_src emacs-lisp
  (use-package apt-sources-list :ensure t)
  (use-package ssh-config-mode :ensure t)
#+end_src

** Finance

Use ledger-mode for my finances with hledger (ledger-mode is quite richer than hledger-mode at the time of writing, but I prefer the hledger tool):
#+begin_src emacs-lisp
  (use-package ledger-mode
    :ensure t
    :mode ("\\.\\(h?ledger\\|journal\\|j\\)$")
    :hook (ledger-mode . orgstruct-mode)
    :custom
    (ledger-binary-path "hledger" "Use hledger instead of ledger")
    (ledger-mode-should-check-version nil "Don't verify if executable is working")
    (ledger-report-links-in-register nil "No link register <-> ledger buffer")
    (ledger-init-file-name nil "No init file for ledger")
    (ledger-report-auto-width nil "No particular width")
    (ledger-report-use-native-highlighting nil "Don't use native highlight")
    )
#+end_src

** CSV

Occasionally have to handle CSV files, so better do it in emacs:
#+begin_src emacs-lisp
  (use-package csv-mode :ensure t :mode "\\.[Cc][Ss][Vv]\\'")
#+end_src

** Window$ files

The following functions handle DOS-style end of lines:
#+begin_src emacs-lisp
  (defun dos-to-unix ()
    "Cut all visible ^M from the current buffer."
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (while (search-forward "\r" nil t)
        (replace-match ""))))

  (defun unix-to-dos ()
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (while (search-forward "\n" nil t)
        (replace-match "\r\n"))))
#+end_src

* Other configuration files

I have some machine-local configurations in =local.el= (loaded from =init.el=), private non-sensitive information in =private.el= and authentication information in the encrypted =~/.authinfo.gpg= (this is the default, so no setup for that one):
#+begin_src emacs-lisp
  (load "~/.emacs.d/private")
#+end_src

# the end
